using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;

using iTextSharp;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.Diagnostics;
using add_jpg_v1.StaticClases;
using System.Text.RegularExpressions;
using PdfSharp.Pdf.IO;
using PdfSharp.Pdf;

namespace add_jpg_v1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();


            #region Кордоны
            dictDescrKordon.Add("1.2.1_Н_ФБ_Осмотр", "1.2.1 Техническое обслуживание фоторадарного блока. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги");
            dictDescrKordon.Add("1.2.2_М_ФБ_Протяжка", "1.2.2 Техническое обслуживание фоторадарного блока. Проверка прочности закрепления (протяжка монтажных болтов крепления)");
            dictDescrKordon.Add("1.2.3_М_ФБ_Световая_индикация", "1.2.3 Техническое обслуживание фоторадарного блока. Проверка рабочего положения выключателей и переключателей, исправности световой индикации, наличие пломб.");
            dictDescrKordon.Add("1.2.4_М_ФБ_Проверка_камеры", "1.2.4 Техническое обслуживание фоторадарного блока. Проверка качества изображения и корректировка параметров камеры фоторадарного блока.");
            dictDescrKordon.Add("1.2.5_М_ФБ_Проверка_ПО", "1.2.5 Техническое обслуживание фоторадарного блока. Проверка работоспособности программного обеспечения.");
            dictDescrKordon.Add("1.2.6_М_ФБ_ИС_ФБ", "1.2.6 Техническое обслуживание фоторадарного блока. Проверка работоспособности измерителя скорости фоторадарного блока.");
            dictDescrKordon.Add("1.2.7_М_ФБ_Климат_контроль", "1.2.7 Техническое обслуживание фоторадарного блока. Проверка работоспособности встроенной системы климат-контроль.");
            dictDescrKordon.Add("1.2.8_Н_ФБ_ИП", "1.2.8 Техническое обслуживание фоторадарного блока. Проверка работоспособности инфракрасного прожектора.");
            dictDescrKordon.Add("1.2.9_М_ФБ_Канал_связи_БС", "1.2.9 Техническое обслуживание фоторадарного блока. Проверка связи с блоком сопряжения.");
            dictDescrKordon.Add("1.2.10_М_ФБ_Канал_связи", "1.2.10 Техническое обслуживание фоторадарного блока. Проверка работоспособности беспроводного канала связи.");
            dictDescrKordon.Add("1.3.1_М_БП_Осмотр", "1.3.1 Техническое обслуживание блока питания. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKordon.Add("1.3.2_М_БП_Протяжка", "1.3.2 Техническое обслуживание блока питания. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKordon.Add("1.3.3_М_БП_ЭП", "1.3.3 Техническое обслуживание блока питания. Проверка обеспечения входным электропитанием, а также обеспечение стабилизированным электропитанием фоторадарного датчика.");
            dictDescrKordon.Add("1.4.1_М_БС_Осмотр", "1.4.1 Техническое обслуживание блока сопряжения. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKordon.Add("1.4.2_М_БС_Протяжка", "1.4.2 Техническое обслуживание блока сопряжения. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKordon.Add("1.4.3_М_БС_Протяжка_клемм", "1.4.3 Техническое обслуживание блока сопряжения. Проверка надежности коммутационных соединений внутренней разводки.");
            dictDescrKordon.Add("1.4.4_М_БС_ЭП", "1.4.4 Техническое обслуживание блока сопряжения. Проверка обеспечения стабильным электропитанием.");
            dictDescrKordon.Add("1.5.0_К_БС_Канал_связи_ЕМТС", "1.5.0 Техническое обслуживание блока сопряжения. Проверка связи до порта коммутатора ЕМТС.");
            dictDescrKordon.Add("1.6.1_М_ШУЭ_Осмотр", "1.6.1 Техническое обслуживание шкафа учета электроэнергии. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKordon.Add("1.6.2_М_ШУЭ_ФБ_Протяжка", "1.6.2 Техническое обслуживание шкафа учета электроэнергии. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKordon.Add("1.6.3_М_ШУЭ_ЭП", "1.6.3 Техническое обслуживание шкафа учета электроэнергии. Проверка обеспечения стабильным электропитанием.");
            dictDescrKordon.Add("1.7.1_К_СК_Проверка_кабеля", "1.7.1 Техническое обслуживание соединительных кабелей. Проверка кабельных трасс на наличие повреждений.");
            dictDescrKordon.Add("2.2.1_Н_ФБ_Осмотр", "2.2.1 Техническое обслуживание фоторадарного блока. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKordon.Add("2.2.2_М_ФБ_Протяжка", "2.2.2 Техническое обслуживание фоторадарного блока. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKordon.Add("2.2.3_М_ФБ_Световая_индикация", "2.2.3 Техническое обслуживание фоторадарного блока. Проверка рабочего положения выключателей и переключателей, исправности световой индикации, наличие пломб.");
            dictDescrKordon.Add("2.2.4_М_ФБ_Проверка_камеры", "2.2.4 Техническое обслуживание фоторадарного блока. Проверка качества изображения и корректировка параметров камеры датчика.");
            dictDescrKordon.Add("2.2.5_М_ФБ_Проверка_ПО", "2.2.5 Техническое обслуживание фоторадарного блока. Проверка работоспособности программного обеспечения.");
            dictDescrKordon.Add("2.2.6_М_ФБ_ИС_ФБ", "2.2.6 Техническое обслуживание фоторадарного блока. Проверка работоспособности измерителя скорости фоторадарного блока.");
            dictDescrKordon.Add("2.2.7_М_ФБ_Климат_контроль", "2.2.7 Техническое обслуживание фоторадарного блока. Проверка работоспособности встроенной системы климат-контроль.");
            dictDescrKordon.Add("2.2.8_Н_ФБ_ИП", "2.2.8 Техническое обслуживание фоторадарного блока. Проверка работоспособности инфракрасного прожектора.");
            dictDescrKordon.Add("2.2.9_М_ФБ_Канал_связи_БС", "2.2.9 Техническое обслуживание фоторадарного блока. Проверка связи с блоком сопряжения.");
            dictDescrKordon.Add("2.2.10_М_ФБ_Канал_связи", "2.2.10 Техническое обслуживание фоторадарного блока. Проверка работоспособности беспроводного канала связи.");
            dictDescrKordon.Add("2.3.1_М_БЭ_Осмотр", "2.3.1 Техническое обслуживание блока электропитания. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKordon.Add("2.3.2_М_БЭ_Протяжка", "2.3.2 Техническое обслуживание блока электропитания. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKordon.Add("2.3.3_М_БЭ_ЭП", "2.3.3 Техническое обслуживание блока электропитания. Проверка обеспечения входным электропитанием, а также обеспечения стабилизированным электропитанием фоторадарного датчика.");
            dictDescrKordon.Add("2.4.1_М_БС_Осмотр", "2.4.1 Техническое обслуживание блока сопряжения. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKordon.Add("2.4.2_М_БС_Протяжка", "2.4.2 Техническое обслуживание блока сопряжения. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKordon.Add("2.4.3_М_БС_Протяжка_клемм", "2.4.3 Техническое обслуживание блока сопряжения. Проверка надежности коммутационных соединений внутренней разводки.");
            dictDescrKordon.Add("2.4.4_М_БС_ЭП", "2.4.4 Техническое обслуживание блока сопряжения. Проверка обеспечения стабильным электропитанием.");
            dictDescrKordon.Add("2.5.0_К_БС_Канал_связи", "2.5.0 Техническое обслуживание блока сопряжения. Проверка связи до порта коммутатора ЕМТС.");
            dictDescrKordon.Add("2.6.1_М_ШУЭ_Осмотр", "2.6.1 Техническое обслуживание шкафа учета электроэнергии. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKordon.Add("2.6.2_М_ШУЭ_Протяжка", "2.6.2 Техническое обслуживание шкафа учета электроэнергии. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKordon.Add("2.6.3_М_ШУЭ_ЭП", "2.6.3 Техническое обслуживание шкафа учета электроэнергии. Проверка обеспечения стабильным электропитанием.");
            dictDescrKordon.Add("2.7.1_К_СК_Проверка_кабеля", "2.7.1 Техническое обслуживание соединительных кабелей. Проверка кабельных трасс на наличие повреждений.");
            dictDescrKordon.Add("2.8.1_Н_ОВК_Осмотр", "2.8.1 Техническое обслуживание обзорной видеокамеры. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKordon.Add("2.8.2_М_ОВК_Протяжка", "2.8.2 Техническое обслуживание обзорной видеокамеры. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKordon.Add("2.8.3_М_ОВК_Проверка_камеры", "2.8.3 Техническое обслуживание обзорной видеокамеры. Проверка качества изображения и корректировка параметров камеры датчика.");
            dictDescrKordon.Add("2.8.4_М_ОВК_Климат_контроль", "2.8.4 Техническое обслуживание обзорной видеокамеры. Проверка работоспособности встроенной системы климат-контроль.");
            dictDescrKordon.Add("2.8.5_М_ОВК_Связь_ОК_РК", "2.8.5 Техническое обслуживание обзорной видеокамеры. Проверка связи между распознающей и обзорной камерой.");

            #endregion
            #region Кречет
            dictDescrKrechet.Add("1.2.1_Н_ФД_Осмотр", "Техническое обслуживание измерителя скорости. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKrechet.Add("1.2.2_М_ФД_Протяжка", "Техническое обслуживание измерителя скорости. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKrechet.Add("1.2.3_М_ФД_Световая_индикация", "Техническое обслуживание измерителя скорости. Проверка рабочего положения выключателей и переключателей, исправности световой индикации, наличие пломб.");
            dictDescrKrechet.Add("1.2.4_М_ФД_Проверка_камеры", "Техническое обслуживание измерителя скорости. Проверка качества изображения и корректировка параметров видеокамеры.");
            dictDescrKrechet.Add("1.2.5_М_ФД_ИС_ИМ", "Техническое обслуживание измерителя скорости. Проверка работоспособности измерителя скорости.");
            dictDescrKrechet.Add("1.2.6_Н_ФД_ИП", "Техническое обслуживание измерителя скорости. Проверка работоспособности инфракрасного прожектора.");
            dictDescrKrechet.Add("1.2.7_М_ФД_Климат_контроль", "Техническое обслуживание измерителя скорости. Проверка работоспособности встроенной системы климат-контроль.");
            dictDescrKrechet.Add("1.3.1_М_ВМ_Осмотр", "Техническое обслуживание вычислительного модуля. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKrechet.Add("1.3.2_М_ВМ_Световая_индикация", "Техническое обслуживание вычислительного модуля. Проверка рабочего положения выключателей и переключателей, исправности световой индикации, наличие пломб.");
            dictDescrKrechet.Add("1.3.3_М_ВМ_Протяжка", "Техническое обслуживание вычислительного модуля. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKrechet.Add("1.3.4_М_ВМ_Проверка_ПО", "Техническое обслуживание вычислительного модуля. Проверка работоспособности программного обеспечения.");
            dictDescrKrechet.Add("1.3.5_М_ВМ_Канал_связи_БС", "Техническое обслуживание вычислительного модуля. Проверка связи с измерителем скорости и вычислительным модулем.");
            dictDescrKrechet.Add("1.3.6_М_ВМ_Канал_связи", "Техническое обслуживание вычислительного модуля. Проверка работоспособности беспроводного канала связи.");
            dictDescrKrechet.Add("1.4.1_М_БП_Осмотр", "Техническое обслуживание блока питания. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKrechet.Add("1.4.2_М_БП_Протяжка", "Техническое обслуживание блока питания. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKrechet.Add("1.4.3_М_БП_ЭП", "Техническое обслуживание блока питания. Проверка обеспечения входным электропитанием, а также обеспечение стабилизированным электропитанием фоторадарного датчика.");
            dictDescrKrechet.Add("1.5.1_М_БС_Осмотр", "Техническое обслуживание блока сопряжения. Внешний осмотр на отсутствие механических повреждений, коррозии, загрязнений, попадания влаги.");
            dictDescrKrechet.Add("1.5.2_М_БС_Протяжка", "Техническое обслуживание блока сопряжения. Проверка прочности закрепления (протяжка монтажных болтов крепления).");
            dictDescrKrechet.Add("1.5.3_М_БС_ТО_кабелей", "Техническое обслуживание блока сопряжения. Проверка надежности коммутационных соединений внутренней разводки.");
            dictDescrKrechet.Add("1.5.4_М_БС_ЭП", "Техническое обслуживание блока сопряжения. Проверка обеспечения стабильным электропитанием.");
            dictDescrKrechet.Add("1.6.0_К_БС_Канал_связи", "Проверка связи до порта коммутатора ЕМТС");
            dictDescrKrechet.Add("1.7.1_К_СК_Проверка_кабеля", "Техническое обслуживание соединительных кабелей. Проверка кабельных трасс на наличие повреждений");
            #endregion

        }

        string pathFolder = String.Empty;
        Dictionary<string, string> dictDescrKordon = new Dictionary<string, string>();

        Dictionary<string, string> dictDescrKrechet = new Dictionary<string, string>();







        private void button1_Click(object sender, EventArgs e)
        {
            Dictionary<string, string> dictDescr = null;

            if (comboBox1.Text == "Кордоны")
            {
                dictDescr = dictDescrKordon;
            }
            else if (comboBox1.Text == "Кречеты")
            {
                dictDescr = dictDescrKrechet;
            }
            else
            {
                MessageBox.Show("Не выбран контракт!\nВыберите, пожалуйста, контракт и повторите попытку.","Ошибка контракта", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            pathFolder = textBox1.Text;
            
            if (pathFolder == String.Empty)
            {
                MessageBox.Show("Не указан путь к папке для формирования отчёта","Не выбрана папка", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
                
            }



            string[] arrPath = Directory.GetDirectories(pathFolder, "*", SearchOption.AllDirectories);

            List<string> list = new List<string>();

            foreach (var item in arrPath)
            {
                string str = new DirectoryInfo(item).Name;

                Match regex = Regex.Match(str, @"\d*\.\d*\.\d*_");
                //Match regex = Regex.Match(item, @"\d*\.\d*\.\d*_");
                string strRes = regex.Groups[0].Value;

                if (strRes != String.Empty)
                {
                    // Здесь мы будем создавать txt файл, в котором будет описание услуги.
                    // Будет сравнение со справочником. Если не найдет в справочнике, то будет ругаться, что данная услуга отсутсвует в справочнике
                    list.Add(item);
                    using (FileStream file = new FileStream(item + @"\descript.txt", FileMode.OpenOrCreate))
                    {
                        using (StreamWriter stream = new StreamWriter(file))
                        {
                            stream.WriteLine(dictDescr[str]);
                        }

                    }
                }

            }




            #region runCreate

            if (textBox1.Text == String.Empty)
            {
                MessageBox.Show("Укажите путь к папке с отчётом!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }


            button1.BackColor = System.Drawing.Color.FromArgb(227, 195, 193);
            button1.Enabled = false;
            button1.Text = "Ожидайте";
            //this.button1.BackColor = System.Drawing.SystemColors.GradientInactiveCaption;

            button2.BackColor = System.Drawing.Color.FromArgb(227, 195, 193);
            button2.Enabled = false;

            textBox1.ReadOnly = true;


            RunCreateReport(pathFolder, button1, button2, textBox1);

            #endregion





        }
        private void button2_Click(object sender, EventArgs e)
        {
            pathFolder = OpenFolder.ChooseFolder(textBox1.Text);
            textBox1.Text = pathFolder;
        }

        async static void RunCreateReport(string pathFolder, Button button1, Button button2, TextBox textBox1)
        {
            await Task.Run(() =>
            {
                try
                {

                    bool flag = CreatePDF.CreateWeekReport(pathFolder);



                    if (!flag)
                    {
                        DeletePDF(pathFolder, "*mini report.pdf", "*middle report.pdf", "*Report.pdf", "*descript.txt");

                        button1.Enabled = true;
                        button1.Text = "Создать отчёт";
                        button1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(201)))), ((int)(((byte)(127)))), ((int)(((byte)(108)))));
                        button1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(236)))));

                        button2.Enabled = true;
                        button2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(201)))), ((int)(((byte)(127)))), ((int)(((byte)(108)))));
                        button2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(236)))));

                        textBox1.ReadOnly = false;

                        return;
                    }

                    DeletePDF(pathFolder, "*mini report.pdf", "*middle report.pdf", "*Report.pdf");

                    DialogResult result = MessageBox.Show("Файл сохранен!\nОткрыть папку в котором находится отчёт?", "Сохранение", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                    if (result == DialogResult.Yes)
                    {
                        Process.Start("explorer", pathFolder);
                    }
                }
                catch (Exception ex)
                {

                    DeletePDF(pathFolder, "*mini report.pdf", "*middle report.pdf", "*Report.pdf");

                    MessageBox.Show($"При выполнении программы обнаруженна неизвестная ошибка!\n{ex.Message}\n{ex.TargetSite}\n{ex.StackTrace}");

                }



                button1.Enabled = true;
                button1.Text = "Создать отчёт";

                button2.Enabled = true;

                button1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(201)))), ((int)(((byte)(127)))), ((int)(((byte)(108)))));
                button1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(236)))));

                button2.Enabled = true;
                button2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(201)))), ((int)(((byte)(127)))), ((int)(((byte)(108)))));
                button2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(236)))));

                textBox1.ReadOnly = false;

            });


        }



        public static void DeletePDF(string pathFolder, params string[] namePdfArr)
        {
            foreach (var namePdf in namePdfArr)
            {
                string[] arrayDeleteMini = Directory.GetFiles(pathFolder, namePdf, SearchOption.AllDirectories);
                foreach (var item in arrayDeleteMini)
                {
                    string path = item;
                    FileInfo fileInf = new FileInfo(path);
                    if (fileInf.Exists)
                    {
                        fileInf.Delete();
                    }
                }
            }

        }


    }


    #region Отладка
    #region Отображение путей куда кладуться txt


    /*

    var listResult = list.GroupBy(g => g).OrderByDescending(g => g.Count()).Select(x => x.Key).OrderBy(x => x);
    //var listResult = list.GroupBy(g => g).OrderByDescending(g => g.Count()).Select(x => $"{x.Count()} - {x.Key}");


    string result = string.Join(Environment.NewLine, listResult);




    textBox2.Text = result;

    //MessageBox.Show(result);
     */
    #endregion
    #endregion


}
